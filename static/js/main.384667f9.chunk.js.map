{"version":3,"sources":["store/reducer.js","store/index.js","services/api.js","services/weatherService.js","store/actions.js","components/weather/WeatherFilter.jsx","components/weather/WeatherMain.jsx","components/weather/WeatherPreview.jsx","components/weather/WeatherList.jsx","components/pages/Home.jsx","components/pages/About.jsx","components/layout/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["initialState","weather","rootReducer","combineReducers","weatherApp","state","action","type","payload","store","createStore","composeWithDevTools","applyMiddleware","thunk","axios","create","baseURL","query","city","a","api","get","res","data","console","log","loadWeather","dispatch","weatherService","WeatherFilter","txt","onChange","target","field","name","value","setState","onSubmit","e","preventDefault","props","onSearch","className","this","placeholder","style","color","Component","mapDispatchToProps","connect","format","Date","now","src","icon","alt","temp","toFixed","max_temp","description","WeatherPreview","day","flag","tomorrow","setDate","getDate","WeatherList","map","index","key","Home","slice","About","href","rel","Navbar","to","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.384667f9.chunk.js","sourcesContent":["const initialState = {\n  weather: null\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case 'SET_WEATHER':\n      return {\n        ...state,\n        weather: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport reducer from './reducer';\n\nconst rootReducer = combineReducers({\n  weatherApp: reducer\n});\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://api.weatherbit.io/v2.0/forecast'\n});\n","import api from './api';\nconst API_KEY = 'd6674be23fab4be5a43a3012193eff20';\n\nconst query = async (city) => {\n  try {\n    const res = await api.get(`daily?city=${city}&key=${API_KEY}`);\n    return res.data;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport default {\n  query\n};\n","import weatherService from '../services/weatherService';\n\nexport const loadWeather = (city) => async (dispatch) => {\n  try {\n    const weather = await weatherService.query(city);\n    dispatch({ type: 'SET_WEATHER', payload: weather });\n  } catch (err) {\n    console.log(err);\n  }\n};\n","import React, { Component } from 'react';\n\nclass WeatherFilter extends Component {\n  state = { txt: '' };\n\n  onChange = ({ target }) => {\n    const field = target.name;\n    const value = target.value;\n    this.setState(({ txt }) => ({ ...txt, [field]: value }));\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    this.props.onSearch(this.state.txt);\n  };\n\n  render() {\n    return (\n      <form className='filter' onSubmit={this.onSubmit}>\n        <input\n          type='text'\n          name='txt'\n          placeholder='Search City...'\n          onChange={this.onChange}\n        />\n        <i className='fas fa-search' style={{ color: '#ccc' }}></i>\n      </form>\n    );\n  }\n}\n\nexport default WeatherFilter;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { loadWeather } from '../../store/actions';\nimport Moment from 'react-moment';\n\nconst WeatherMain = ({ weather }) => {\n  return (\n    <div className='wrapper'>\n      <div className='wrapper-header'>\n        <p>Tody</p>\n        <p>\n          <Moment format='LL'>{Date.now()}</Moment>\n        </p>\n      </div>\n      <div className='wrapper-body'>\n        <img\n          src={`https://www.weatherbit.io/static/img/icons/${weather.data[0].weather.icon}.png`}\n          alt=''\n        />\n        <div className='weather-specs'>\n          <p>\n            <span className='weather-specs-current'>\n              {weather.data[0].temp.toFixed(0)}\n            </span>{' '}\n            <span className='weather-specs-avg'>\n              /{weather.data[0].max_temp.toFixed(0)} °C\n            </span>\n          </p>\n          <p>{weather.data[0].weather.description}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  weather: state.weatherApp.weather\n});\nconst mapDispatchToProps = {\n  loadWeather\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherMain);\n","import React from 'react';\nimport Moment from 'react-moment';\n\nconst WeatherPreview = ({ day, flag }) => {\n  const tomorrow = new Date();\n  return (\n    <div className='weather-card'>\n      <h3>\n        {' '}\n        <Moment format='dddd'>\n          {tomorrow.setDate(new Date().getDate() + flag)}\n        </Moment>\n      </h3>\n\n      <p>{day.weather.description}</p>\n      <img\n        src={`https://www.weatherbit.io/static/img/icons/${day.weather.icon}.png`}\n        alt=''\n      />\n      <div className='temp'>{day.temp.toFixed(0)} °C</div>\n    </div>\n  );\n};\n\nexport default WeatherPreview;\n","import React from 'react';\nimport WeatherPreview from './WeatherPreview';\n\nconst WeatherList = ({ weather }) => {\n  return (\n    <div className='weekly-wrapper'>\n      {weather.map((day, index) => (\n        <WeatherPreview key={index} day={day} flag={index + 1} />\n      ))}\n    </div>\n  );\n};\n\nexport default WeatherList;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { loadWeather } from '../../store/actions';\nimport WeatherFilter from '../weather/WeatherFilter';\nimport WeatherMain from '../weather/WeatherMain';\nimport WeatherList from '../weather/WeatherList';\n\nclass Home extends Component {\n  onSearch = (city) => {\n    this.props.loadWeather(city);\n  };\n\n  render() {\n    const { weather } = this.props;\n    return (\n      <section>\n        <WeatherFilter onSearch={this.onSearch} />\n        {weather !== null && (\n          <>\n            <WeatherMain weather={weather} />\n            <WeatherList weather={weather.data.slice(0, 6)} />\n          </>\n        )}\n\n        {/* <div className='weekly-wrapper'>\n          <div className='weather-card'>\n            <h3>MON</h3>\n            <p>11:00</p>\n            <img\n              src='https://www.weatherbit.io/static/img/icons/c02d.png'\n              alt=''\n            />\n            <div className='temp'>20 °C</div>\n          </div>\n          <div className='weather-card'>\n            <h3>MON</h3>\n\n            <p>11:00</p>\n            <img\n              src='https://www.weatherbit.io/static/img/icons/c02d.png'\n              alt=''\n            />\n            <div className='temp'>20 °C</div>\n          </div>\n          <div className='weather-card'>\n            <h3>MON</h3>\n\n            <p>11:00</p>\n            <img\n              src='https://www.weatherbit.io/static/img/icons/c02d.png'\n              alt=''\n            />\n            <div className='temp'>20 °C</div>\n          </div>\n          <div className='weather-card'>\n            <h3>MON</h3>\n\n            <p>11:00</p>\n            <img\n              src='https://www.weatherbit.io/static/img/icons/c02d.png'\n              alt=''\n            />\n            <div className='temp'>20 °C</div>\n          </div>\n          <div className='weather-card'>\n            <h3>MON</h3>\n\n            <p>11:00</p>\n            <img\n              src='https://www.weatherbit.io/static/img/icons/c02d.png'\n              alt=''\n            />\n            <div className='temp'>20 °C</div>\n          </div>\n          <div className='weather-card'>\n            <h3>MON</h3>\n\n            <p>11:00</p>\n            <img\n              src='https://www.weatherbit.io/static/img/icons/c02d.png'\n              alt=''\n            />\n            <div className='temp'>20 °C</div>\n          </div>\n        </div> */}\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  weather: state.weatherApp.weather\n});\nconst mapDispatchToProps = {\n  loadWeather\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React from 'react';\n\nconst About = () => {\n  return (\n    <section className='about'>\n      <div className='about-wrapper'>\n        <img\n          src='https://media-exp1.licdn.com/dms/image/C4D03AQG5p2qiT7jtGQ/profile-displayphoto-shrink_400_400/0?e=1598486400&v=beta&t=D0IubSmpXnjWlTlhkgXiwYuYVjI2I2jN156Uxmg9_5o'\n          alt=''\n        />\n        <div>\n          <p className='by'>Developed By @Matan Shaviro</p>\n          <div className='social-icons'>\n            <a\n              href='https://www.linkedin.com/in/matan-shaviro-990b0272/'\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              <i className='fab fa-linkedin fa-2x'></i>\n            </a>\n            <a\n              href='https://github.com/matan3sh/vue-misBook'\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              <i className='fab fa-github-square fa-2x'></i>\n            </a>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default About;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Navbar = () => {\n  return (\n    <nav className='main-nav'>\n      <img\n        src='https://i.pinimg.com/originals/77/0b/80/770b805d5c99c7931366c2e84e88f251.png'\n        alt='Weather-App'\n        className='logo'\n      />\n      <ul className='main-menu'>\n        <li>\n          <Link to='/'>Home</Link>\n        </li>\n        <li>\n          <Link to='/about'>About</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport Home from './components/pages/Home';\nimport About from './components/pages/About';\nimport Navbar from './components/layout/Navbar';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route exact path='/about' component={About} />\n        </Switch>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './style/style.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}